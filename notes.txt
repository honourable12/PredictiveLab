

"these are the actions that can be performed on the dataset visualize "@app.get("/visualize_dataset/{dataset_id}")
def visualize_dataset(
    dataset_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    dataset = db.query(Dataset).filter_by(id=dataset_id, user_id=current_user.id).first()
    if not dataset:
        raise HTTPException(status_code=404, detail="Dataset not found")

    df = pd.read_csv(BytesIO(dataset.file_data))
    summary = {
        "shape": df.shape,
        "columns": df.columns.tolist(),
        "missing_values": df.isnull().sum().to_dict(),
        "dtypes": df.dtypes.astype(str).to_dict()
    }
    return summary" and clean dataset "@app.post("/clean_dataset/{dataset_id}")
def clean_dataset(
    dataset_id: int,
    operations: List[dict]= "handle_missing",
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    dataset = db.query(Dataset).filter_by(id=dataset_id, user_id=current_user.id).first()
    if not dataset:
        raise HTTPException(status_code=404, detail="Dataset not found")

    try:
        df = pd.read_csv(BytesIO(dataset.file_data))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error reading dataset: {str(e)}")

    for operation in operations:
        op_type = operation.get('type')

        if op_type == 'handle_missing':
            strategy = operation.get('strategy', 'drop')
            fill_value = operation.get('fill_value', None)
            df = handle_missing_data(df, strategy, fill_value)

        elif op_type == 'remove_duplicates':
            df = remove_duplicates(df)

        elif op_type == 'convert_type':
            column = operation.get('column')
            new_type = operation.get('new_type')
            if column and new_type:
                df = convert_column_type(df, column, new_type)
            else:
                raise HTTPException(status_code=400, detail="Column or new type missing for conversion")

        elif op_type == 'remove_outliers':
            column = operation.get('column')
            method = operation.get('method', 'zscore')
            threshold = operation.get('threshold', 3)
            if column:
                df = remove_outliers(df, column, method, threshold)
            else:
                raise HTTPException(status_code=400, detail="Column missing for outlier removal")

        else:
            raise HTTPException(status_code=400, detail=f"Unknown operation type: {op_type}")

    preview = df.head(10).to_dict(orient="records")
    row_count = df.shape[0]
    column_count = df.shape[1]

    return {
        "message": "Dataset cleaned successfully",
        "preview": preview,
        "row_count": row_count,
        "column_count": column_count
    }" can you addthem to the actions that can be performed on the dataset"